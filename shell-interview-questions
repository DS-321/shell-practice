Basic Shell Scripting Interview Questions
    What is a shell?
    What is a shell script?
    How do you write and execute a simple shell script?
    What are the different types of shells available in Linux?
    How do you make a script executable?
    What is the purpose of #!/bin/bash at the top of a script?
    What are variables in shell scripting? How do you declare and access them?
    What is the difference between $VAR and ${VAR}?
    How do you read user input in a shell script?
    How do you use conditional statements (if, else, elif) in shell scripting?
    How do you use loops (for, while, until) in shell scripting?
    What are positional parameters ($0, $1, … $n)?
    What is the difference between "$*", "$@", $#, and $??
    How do you add comments in a shell script?
    How do you debug a shell script?
Intermediate Shell Scripting Interview Questions
    What are functions in shell scripting? How do you define and call them?
    How do you pass arguments to a function?
    What is the difference between [ and [[ in conditional expressions?
    Explain the use of &&, ||, and ! logical operators.
    What are arrays in Bash? How do you declare and access them?
    How can you perform arithmetic operations in a shell script?
    How do you redirect output and errors (>, >>, 2>, &>, tee)?
    What is the use of xargs, and how is it different from exec?
    How can you schedule scripts using cron?
    What is the difference between source script.sh and ./script.sh?
    How do you check if a file exists or is readable/writable/executable?
    What is the purpose of trap in shell scripting?
    How do you handle signals in a shell script?
    How do you implement error handling in shell scripts?
    What is a subshell, and how is it different from sourcing?
Advanced Shell Scripting Interview Questions
    Explain process substitution and command substitution.
    What is the difference between exec, eval, and source?
    How can you use sed and awk within shell scripts?
    Write a script to monitor disk usage and send alerts.
    How do you implement logging in a shell script?
    How do you ensure atomicity in a shell script (e.g., during file writes)?
    Explain how you can use here-documents (<<EOF) in scripts.
    Write a script to parse a large log file and extract specific information.
    How can you implement parallel processing in a shell script?
    What are some security best practices for shell scripting?
    What is the use of set -e, set -x, set -u and how do they help in scripts?
    How would you write a self-healing script (e.g., restart a service on failure)?
    Explain how file descriptors work and how to use them in scripts.
    How can you handle JSON or XML data in shell scripts?
    What’s the best way to write reusable, modular shell scripts?

Terraform Interview Questions
10 Terraform Scenario Questions
1) What happens if your state file is accidentally deleted?
Answer: Terraform loses track of all managed infrastructure. On the next apply, it will attempt to recreate everything from scratch, potentially causing conflicts with existing resources.
2) What happens if multiple team members run terraform apply simultaneously?
Answer: State file locking fails, risking corrupted state and inconsistent infrastructure. One process succeeds while others error out, potentially leading to drift if not managed properly.
 3) What happens if a resource fails halfway through a terraform apply?
Answer: Terraform leaves successfully created resources running but marks the state as tainted. Subsequent apply operations will attempt to recreate failed resources, but you're left in partial state.
4) What happens when AWS API rate limits are hit during a large terraform apply?
Answer: Operations fail with throttling errors. Terraform retries a few times then fails the apply. Resources created before the limit was hit remain, creating partial deployments.
 5) What happens if terraform plan shows no changes but infrastructure was modified outside Terraform?
Answer: Terraform won't detect the drift until you run terraform refresh or terraform plan -refresh-only. This can lead to unexpected behavior when making future changes.
6) What happens if you delete a resource definition from your configuration?
Answer: On next apply, Terraform will destroy that resource in your infrastructure unless you use terraform state rm to remove it from state first or use lifecycle { prevent_destroy = true }.
7) What happens if a provider API changes between Terraform versions?
Answer: You may encounter compatibility issues and failed plans/applies. Resources might need to be rebuilt or configurations updated to match new API requirements.
 8) What happens if you have circular dependencies in your Terraform modules?
Answer: Terraform will fail to initialize or plan with dependency cycle errors. You'll need to refactor your module structure to break the circular references.
9) What happens if you exceed AWS service quotas during deployment?
Answer: Resources will fail to create with quota exceeded errors. Terraform marks them as failed, and you'll need to request quota increases before retrying the apply.
10) What happens if you lose access to the remote backend storing your state?
Answer: All Terraform operations fail until access is restored. Teams can't collaborate, and changes can't be applied safely. This effectively blocks all infrastructure changes.